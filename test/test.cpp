#include "pch.h"
#include <set>
#include <format>
#include "UUID.h"
//---------------------------------------------------------------------------------------------------------------------------------
using namespace std;
//---------------------------------------------------------------------------------------------------------------------------------
TEST(TestCaseName, TestName) {
  MyUuid::UUID uid = MyUuid::getUUID();
  std::cout << uid.toStr() << std::endl;
  MyUuid::releaseUUID(uid);
  SUCCEED();
}
//---------------------------------------------------------------------------------------------------------------------------------
TEST(UUIDTestDisplay, uuid1) { // Этот тест должен стоять на превом месте иначе не пройдёт...
  constexpr size_t SIZE = 100;
  MyUuid::UUID uid[SIZE], uidZerro;
  char uuidStr[SIZE][38]{"00000000-0000-0000-0000-000000000001", "00000000-0000-0000-0000-000000000002",
    "00000000-0000-0000-0000-000000000003", "00000000-0000-0000-0000-000000000004", "00000000-0000-0000-0000-000000000005",
    "00000000-0000-0000-0000-000000000006", "00000000-0000-0000-0000-000000000007", "00000000-0000-0000-0000-000000000008",
    "00000000-0000-0000-0000-000000000009", "00000000-0000-0000-0000-00000000000A", "00000000-0000-0000-0000-00000000000B",
    "00000000-0000-0000-0000-00000000000C", "00000000-0000-0000-0000-00000000000D", "00000000-0000-0000-0000-00000000000E",
    "00000000-0000-0000-0000-00000000000F", "00000000-0000-0000-0000-000000000010", "00000000-0000-0000-0000-000000000011",
    "00000000-0000-0000-0000-000000000012", "00000000-0000-0000-0000-000000000013", "00000000-0000-0000-0000-000000000014",
    "00000000-0000-0000-0000-000000000015", "00000000-0000-0000-0000-000000000016", "00000000-0000-0000-0000-000000000017",
    "00000000-0000-0000-0000-000000000018", "00000000-0000-0000-0000-000000000019", "00000000-0000-0000-0000-00000000001A",
    "00000000-0000-0000-0000-00000000001B", "00000000-0000-0000-0000-00000000001C", "00000000-0000-0000-0000-00000000001D",
    "00000000-0000-0000-0000-00000000001E", "00000000-0000-0000-0000-00000000001F", "00000000-0000-0000-0000-000000000020",
    "00000000-0000-0000-0000-000000000021", "00000000-0000-0000-0000-000000000022", "00000000-0000-0000-0000-000000000023",
    "00000000-0000-0000-0000-000000000024", "00000000-0000-0000-0000-000000000025", "00000000-0000-0000-0000-000000000026",
    "00000000-0000-0000-0000-000000000027", "00000000-0000-0000-0000-000000000028", "00000000-0000-0000-0000-000000000029",
    "00000000-0000-0000-0000-00000000002A", "00000000-0000-0000-0000-00000000002B", "00000000-0000-0000-0000-00000000002C",
    "00000000-0000-0000-0000-00000000002D", "00000000-0000-0000-0000-00000000002E", "00000000-0000-0000-0000-00000000002F",
    "00000000-0000-0000-0000-000000000030", "00000000-0000-0000-0000-000000000031", "00000000-0000-0000-0000-000000000032",
    "00000000-0000-0000-0000-000000000033", "00000000-0000-0000-0000-000000000034", "00000000-0000-0000-0000-000000000035",
    "00000000-0000-0000-0000-000000000036", "00000000-0000-0000-0000-000000000037", "00000000-0000-0000-0000-000000000038",
    "00000000-0000-0000-0000-000000000039", "00000000-0000-0000-0000-00000000003A", "00000000-0000-0000-0000-00000000003B",
    "00000000-0000-0000-0000-00000000003C", "00000000-0000-0000-0000-00000000003D", "00000000-0000-0000-0000-00000000003E",
    "00000000-0000-0000-0000-00000000003F", "00000000-0000-0000-0000-000000000040", "00000000-0000-0000-0000-000000000041",
    "00000000-0000-0000-0000-000000000042", "00000000-0000-0000-0000-000000000043", "00000000-0000-0000-0000-000000000044",
    "00000000-0000-0000-0000-000000000045", "00000000-0000-0000-0000-000000000046", "00000000-0000-0000-0000-000000000047",
    "00000000-0000-0000-0000-000000000048", "00000000-0000-0000-0000-000000000049", "00000000-0000-0000-0000-00000000004A",
    "00000000-0000-0000-0000-00000000004B", "00000000-0000-0000-0000-00000000004C", "00000000-0000-0000-0000-00000000004D",
    "00000000-0000-0000-0000-00000000004E", "00000000-0000-0000-0000-00000000004F", "00000000-0000-0000-0000-000000000050",
    "00000000-0000-0000-0000-000000000051", "00000000-0000-0000-0000-000000000052", "00000000-0000-0000-0000-000000000053",
    "00000000-0000-0000-0000-000000000054", "00000000-0000-0000-0000-000000000055", "00000000-0000-0000-0000-000000000056",
    "00000000-0000-0000-0000-000000000057", "00000000-0000-0000-0000-000000000058", "00000000-0000-0000-0000-000000000059",
    "00000000-0000-0000-0000-00000000005A", "00000000-0000-0000-0000-00000000005B", "00000000-0000-0000-0000-00000000005C",
    "00000000-0000-0000-0000-00000000005D", "00000000-0000-0000-0000-00000000005E", "00000000-0000-0000-0000-00000000005F",
    "00000000-0000-0000-0000-000000000060", "00000000-0000-0000-0000-000000000061", "00000000-0000-0000-0000-000000000062",
    "00000000-0000-0000-0000-000000000063", "00000000-0000-0000-0000-000000000064"};
  for(size_t i = 0; i < SIZE; i++) {
    uid[i] = MyUuid::getUUID();
  }
  for(size_t i = 0; i < SIZE; i++) {
    ASSERT_STREQ(uid[i].toStr().c_str(), uuidStr[i]);
  }
  for(size_t i = 0; i < SIZE; i++) {
    MyUuid::releaseUUID(uid[i]);
  }
}
//---------------------------------------------------------------------------------------------------------------------------------
TEST(UUIDTestCreateRelease, uuid2) {
  constexpr size_t SIZE = 100;
  MyUuid::UUID uid[100], uidZerro;
  for(size_t i = 0; i < SIZE; i++) {
    uid[i] = MyUuid::getUUID();
  }
  for(size_t i = 0; i < SIZE; i++) {
    ASSERT_FALSE(uid[i] == uidZerro);
  }
  for(size_t i = 0; i < SIZE; i++) {
    MyUuid::releaseUUID(uid[i]);
  }
}
//---------------------------------------------------------------------------------------------------------------------------------
TEST(UUIDTestOrder, uuid3) { // Используется контейнер set, который вставляет
  // только уникальные упорядоченые элементыю И если он вставил все из сгенерированных,
  // то это означает что они все уникальны и упорядочены.  
  constexpr size_t SIZE = 100;
  MyUuid::UUID uid[SIZE];
  for(size_t i = 0; i < SIZE; ++i) {
    uid[i] = MyUuid::getUUID();
  }
  set<MyUuid::UUID> dt(begin(uid), end(uid));
  ASSERT_EQ(dt.size(), SIZE);
  dt.clear();
  for(auto v : uid) {
    MyUuid::releaseUUID(v);
  }
}
//---------------------------------------------------------------------------------------------------------------------------------
TEST(UUIDTestRndGen, uuid4) {
  const char strUUID[][38]{"8ACCBE71-889C-7A32-8ACC-BE71889C7A32", "AA208443-EBEC-C72D-AA20-8443EBECC72D",
    "14E349FC-8A65-0B72-14E3-49FC8A650B72", "9CF2E34B-8A72-7603-9CF2-E34B8A727603", "B7D91C86-0832-3693-B7D9-1C8608323693",
    "DC229194-F5AE-C743-DC22-9194F5AEC743", "66C700AA-2715-A1DD-66C7-00AA2715A1DD", "AC51DD4E-8870-ED1F-AC51-DD4E8870ED1F",
    "5C69C98A-E1F0-CE20-5C69-C98AE1F0CE20", "E671E062-27C5-7DA5-E671-E06227C57DA5", "1DF1EA60-C926-039C-1DF1-EA60C926039C",
    "537B04DB-1CAB-FAED-537B-04DB1CABFAED", "C8BD1AC6-4C59-419E-C8BD-1AC64C59419E", "0EDAB02A-A8CF-4530-0EDA-B02AA8CF4530",
    "B560DDE5-8BF7-2009-B560-DDE58BF72009", "F0454D66-91D3-ABB8-F045-4D6691D3ABB8", "058EB79B-077F-F1EA-058E-B79B077FF1EA",
    "858762A5-934C-03DE-8587-62A5934C03DE", "89C1187C-CF7B-995D-89C1-187CCF7B995D", "C7C058C3-57F0-8FA0-C7C0-58C357F08FA0",
    "E2AC063E-0E83-4449-E2AC-063E0E834449", "A6D7EFF4-3643-B130-A6D7-EFF43643B130", "812A44B6-073E-17E3-812A-44B6073E17E3",
    "89DE3D19-3074-4736-89DE-3D1930744736", "F1141F43-D824-D6D6-F114-1F43D824D6D6", "B821FD66-2D9C-980D-B821-FD662D9C980D",
    "781218DB-289E-8AAB-7812-18DB289E8AAB", "ED6747E0-4007-9860-ED67-47E040079860", "5FA11EE0-AC49-6086-5FA1-1EE0AC496086",
    "21231650-E5D3-2627-2123-1650E5D32627", "E94FF847-1128-C1B3-E94F-F8471128C1B3", "3289DCF2-1809-1D5D-3289-DCF218091D5D",
    "8619D09D-2BEC-297B-8619-D09D2BEC297B", "B2B5A77D-CFC7-6868-B2B5-A77DCFC76868", "93C1A98D-296D-FC2E-93C1-A98D296DFC2E",
    "E37ABA7A-F026-67BB-E37A-BA7AF02667BB", "07B3E4D1-DB47-496A-07B3-E4D1DB47496A", "2AA18A6D-2811-E31A-2AA1-8A6D2811E31A",
    "ECECFAE3-9954-DBB8-ECEC-FAE39954DBB8", "027A421B-A56B-C891-027A-421BA56BC891", "C973609B-4319-FF38-C973-609B4319FF38",
    "8FE12089-A20F-15B7-8FE1-2089A20F15B7", "1E36D141-40DB-E89F-1E36-D14140DBE89F", "6981A1BE-F2C7-DD46-6981-A1BEF2C7DD46",
    "602A114A-FD7F-FABD-602A-114AFD7FFABD", "B74B43C9-3F14-C7E5-B74B-43C93F14C7E5", "785B5DF0-A53F-8E43-785B-5DF0A53F8E43",
    "EC05E258-0A28-7664-EC05-E2580A287664", "FBDF73EE-5109-F7EF-FBDF-73EE5109F7EF", "7D35724D-17E4-CEEF-7D35-724D17E4CEEF",
    "03638F95-9BB0-DBB6-0363-8F959BB0DBB6", "DB81A176-98A3-CE02-DB81-A17698A3CE02", "DF771025-94B1-EE70-DF77-102594B1EE70",
    "26F5BCD0-CFBE-334D-26F5-BCD0CFBE334D", "7F3F655B-38A3-444F-7F3F-655B38A3444F", "B7AC6DF1-9D5E-B2F3-B7AC-6DF19D5EB2F3",
    "C0B1C6CC-DA00-EA33-C0B1-C6CCDA00EA33", "E80CA710-2D02-8BF0-E80C-A7102D028BF0", "0F5B6D64-C1A0-EAAB-0F5B-6D64C1A0EAAB",
    "EB48604B-430E-3CDC-EB48-604B430E3CDC", "3D1C107F-C32C-C38E-3D1C-107FC32CC38E", "2F06E1E1-4EE6-2153-2F06-E1E14EE62153",
    "073E6470-E8B3-1BE5-073E-6470E8B31BE5", "E7519A13-1FA3-EE07-E751-9A131FA3EE07", "7436C98D-790D-0207-7436-C98D790D0207",
    "15BC0F4C-5805-9F57-15BC-0F4C58059F57", "B50F444A-0158-E1AC-B50F-444A0158E1AC", "2F2362BC-1B63-2EE7-2F23-62BC1B632EE7",
    "E2459EC0-5B65-C9F5-E245-9EC05B65C9F5", "B632EBFE-E1C3-E8A9-B632-EBFEE1C3E8A9", "209AAC7A-1EA9-CF18-209A-AC7A1EA9CF18",
    "EA22FA25-882F-4F93-EA22-FA25882F4F93", "D630F0A4-62BC-DA71-D630-F0A462BCDA71", "40C1176D-5BDD-65F3-40C1-176D5BDD65F3",
    "218936B9-5D14-2BE2-2189-36B95D142BE2", "2F98652E-865C-7B4C-2F98-652E865C7B4C", "E941D451-C997-5BEF-E941-D451C9975BEF",
    "6564DFE8-F817-DCCD-6564-DFE8F817DCCD", "84201193-862F-D911-8420-1193862FD911", "76B0A5A7-17F3-15C2-76B0-A5A717F315C2",
    "A06A1209-D488-668A-A06A-1209D488668A", "2F247953-2DD6-4D44-2F24-79532DD64D44", "3605D6E6-14B9-672C-3605-D6E614B9672C",
    "A804FDAB-B1CB-7A3D-A804-FDABB1CB7A3D", "D5B336F4-24EB-1400-D5B3-36F424EB1400", "E020519A-3166-11E9-E020-519A316611E9",
    "8299CDD6-4CAD-4198-8299-CDD64CAD4198", "4F4AC23D-FD3C-38BF-4F4A-C23DFD3C38BF", "4A67AEAC-C1C3-B09C-4A67-AEACC1C3B09C",
    "2D2C3590-2674-5FC2-2D2C-359026745FC2", "23E129BA-C358-6E38-23E1-29BAC3586E38", "19CF5611-B267-DF8B-19CF-5611B267DF8B",
    "EE7E7099-4FE4-53ED-EE7E-70994FE453ED", "E652C05F-5EF9-53BD-E652-C05F5EF953BD", "37033B68-DBF2-4907-3703-3B68DBF24907",
    "22491453-DD20-A6E7-2249-1453DD20A6E7", "35D53F73-5162-D643-35D5-3F735162D643", "2847CDF7-FEB8-CA3F-2847-CDF7FEB8CA3F",
    "39F5849B-BCEA-0812-39F5-849BBCEA0812", "D6653F14-102F-BA8D-D665-3F14102FBA8D"};
  constexpr size_t SIZE = _countof(strUUID);
  for(size_t i = 0; i < SIZE; ++i) {
    MyUuid::UUID uid(strUUID[i]);
    ASSERT_STREQ(uid.toStr().c_str(), strUUID[i]);
  }
}
//---------------------------------------------------------------------------------------------------------------------------------